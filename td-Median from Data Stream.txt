class MedianFinder {
        /*
Key points to solve this problem :-
- > create max heap for smaller half of the list
- > create min heap for the larger half of the list
- > check the size of the two heaps, if they differ by more the 1 element, rebalace them by transfering 1 element from heap with greater size to smaller
-> if the two heaps has equal sizes, median will be average of top element of min and the max heap
- > else if whichever heaps has the max no. of elements, top element of that heap will be the median
    */

    
    PriorityQueue<Integer> minHeap = new PriorityQueue<Integer>();
    PriorityQueue<Integer> maxHeap = new PriorityQueue<Integer>(Collections.reverseOrder());
    public MedianFinder() {
        
    }
    public void addNum(int num) {
        if(maxHeap.size() == 0 || maxHeap.peek() >= num){
            maxHeap.add(num);
        }
        else{
            minHeap.add(num);
        }
        if(maxHeap.size() > minHeap.size() + 1){
            minHeap.add(maxHeap.poll());
        }
        if(minHeap.size() > maxHeap.size() + 1){
            maxHeap.add(minHeap.poll());
        }
    }
    
    public double findMedian() {
       double median = 0.0;
       if(minHeap.size() > maxHeap.size()){
           median = minHeap.peek();
       }else if(maxHeap.size() > minHeap.size()){
           median = maxHeap.peek();
       }else{
           median = (minHeap.peek() + maxHeap.peek())/2.0;
       }
      return median;
    }
}